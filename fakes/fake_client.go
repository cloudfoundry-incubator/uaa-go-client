// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	uaa_go_client "code.cloudfoundry.org/uaa-go-client"
	"code.cloudfoundry.org/uaa-go-client/schema"
)

type FakeClient struct {
	DecodeTokenStub        func(string, ...string) error
	decodeTokenMutex       sync.RWMutex
	decodeTokenArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	decodeTokenReturns struct {
		result1 error
	}
	decodeTokenReturnsOnCall map[int]struct {
		result1 error
	}
	FetchIssuerStub        func() (string, error)
	fetchIssuerMutex       sync.RWMutex
	fetchIssuerArgsForCall []struct {
	}
	fetchIssuerReturns struct {
		result1 string
		result2 error
	}
	fetchIssuerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	FetchKeyStub        func() (string, error)
	fetchKeyMutex       sync.RWMutex
	fetchKeyArgsForCall []struct {
	}
	fetchKeyReturns struct {
		result1 string
		result2 error
	}
	fetchKeyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	FetchTokenStub        func(bool) (*schema.Token, error)
	fetchTokenMutex       sync.RWMutex
	fetchTokenArgsForCall []struct {
		arg1 bool
	}
	fetchTokenReturns struct {
		result1 *schema.Token
		result2 error
	}
	fetchTokenReturnsOnCall map[int]struct {
		result1 *schema.Token
		result2 error
	}
	RegisterOauthClientStub        func(*schema.OauthClient) (*schema.OauthClient, error)
	registerOauthClientMutex       sync.RWMutex
	registerOauthClientArgsForCall []struct {
		arg1 *schema.OauthClient
	}
	registerOauthClientReturns struct {
		result1 *schema.OauthClient
		result2 error
	}
	registerOauthClientReturnsOnCall map[int]struct {
		result1 *schema.OauthClient
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) DecodeToken(arg1 string, arg2 ...string) error {
	fake.decodeTokenMutex.Lock()
	ret, specificReturn := fake.decodeTokenReturnsOnCall[len(fake.decodeTokenArgsForCall)]
	fake.decodeTokenArgsForCall = append(fake.decodeTokenArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.DecodeTokenStub
	fakeReturns := fake.decodeTokenReturns
	fake.recordInvocation("DecodeToken", []interface{}{arg1, arg2})
	fake.decodeTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DecodeTokenCallCount() int {
	fake.decodeTokenMutex.RLock()
	defer fake.decodeTokenMutex.RUnlock()
	return len(fake.decodeTokenArgsForCall)
}

func (fake *FakeClient) DecodeTokenCalls(stub func(string, ...string) error) {
	fake.decodeTokenMutex.Lock()
	defer fake.decodeTokenMutex.Unlock()
	fake.DecodeTokenStub = stub
}

func (fake *FakeClient) DecodeTokenArgsForCall(i int) (string, []string) {
	fake.decodeTokenMutex.RLock()
	defer fake.decodeTokenMutex.RUnlock()
	argsForCall := fake.decodeTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) DecodeTokenReturns(result1 error) {
	fake.decodeTokenMutex.Lock()
	defer fake.decodeTokenMutex.Unlock()
	fake.DecodeTokenStub = nil
	fake.decodeTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DecodeTokenReturnsOnCall(i int, result1 error) {
	fake.decodeTokenMutex.Lock()
	defer fake.decodeTokenMutex.Unlock()
	fake.DecodeTokenStub = nil
	if fake.decodeTokenReturnsOnCall == nil {
		fake.decodeTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) FetchIssuer() (string, error) {
	fake.fetchIssuerMutex.Lock()
	ret, specificReturn := fake.fetchIssuerReturnsOnCall[len(fake.fetchIssuerArgsForCall)]
	fake.fetchIssuerArgsForCall = append(fake.fetchIssuerArgsForCall, struct {
	}{})
	stub := fake.FetchIssuerStub
	fakeReturns := fake.fetchIssuerReturns
	fake.recordInvocation("FetchIssuer", []interface{}{})
	fake.fetchIssuerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) FetchIssuerCallCount() int {
	fake.fetchIssuerMutex.RLock()
	defer fake.fetchIssuerMutex.RUnlock()
	return len(fake.fetchIssuerArgsForCall)
}

func (fake *FakeClient) FetchIssuerCalls(stub func() (string, error)) {
	fake.fetchIssuerMutex.Lock()
	defer fake.fetchIssuerMutex.Unlock()
	fake.FetchIssuerStub = stub
}

func (fake *FakeClient) FetchIssuerReturns(result1 string, result2 error) {
	fake.fetchIssuerMutex.Lock()
	defer fake.fetchIssuerMutex.Unlock()
	fake.FetchIssuerStub = nil
	fake.fetchIssuerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchIssuerReturnsOnCall(i int, result1 string, result2 error) {
	fake.fetchIssuerMutex.Lock()
	defer fake.fetchIssuerMutex.Unlock()
	fake.FetchIssuerStub = nil
	if fake.fetchIssuerReturnsOnCall == nil {
		fake.fetchIssuerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.fetchIssuerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchKey() (string, error) {
	fake.fetchKeyMutex.Lock()
	ret, specificReturn := fake.fetchKeyReturnsOnCall[len(fake.fetchKeyArgsForCall)]
	fake.fetchKeyArgsForCall = append(fake.fetchKeyArgsForCall, struct {
	}{})
	stub := fake.FetchKeyStub
	fakeReturns := fake.fetchKeyReturns
	fake.recordInvocation("FetchKey", []interface{}{})
	fake.fetchKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) FetchKeyCallCount() int {
	fake.fetchKeyMutex.RLock()
	defer fake.fetchKeyMutex.RUnlock()
	return len(fake.fetchKeyArgsForCall)
}

func (fake *FakeClient) FetchKeyCalls(stub func() (string, error)) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = stub
}

func (fake *FakeClient) FetchKeyReturns(result1 string, result2 error) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = nil
	fake.fetchKeyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchKeyReturnsOnCall(i int, result1 string, result2 error) {
	fake.fetchKeyMutex.Lock()
	defer fake.fetchKeyMutex.Unlock()
	fake.FetchKeyStub = nil
	if fake.fetchKeyReturnsOnCall == nil {
		fake.fetchKeyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.fetchKeyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchToken(arg1 bool) (*schema.Token, error) {
	fake.fetchTokenMutex.Lock()
	ret, specificReturn := fake.fetchTokenReturnsOnCall[len(fake.fetchTokenArgsForCall)]
	fake.fetchTokenArgsForCall = append(fake.fetchTokenArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.FetchTokenStub
	fakeReturns := fake.fetchTokenReturns
	fake.recordInvocation("FetchToken", []interface{}{arg1})
	fake.fetchTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) FetchTokenCallCount() int {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	return len(fake.fetchTokenArgsForCall)
}

func (fake *FakeClient) FetchTokenCalls(stub func(bool) (*schema.Token, error)) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = stub
}

func (fake *FakeClient) FetchTokenArgsForCall(i int) bool {
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	argsForCall := fake.fetchTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) FetchTokenReturns(result1 *schema.Token, result2 error) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	fake.fetchTokenReturns = struct {
		result1 *schema.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FetchTokenReturnsOnCall(i int, result1 *schema.Token, result2 error) {
	fake.fetchTokenMutex.Lock()
	defer fake.fetchTokenMutex.Unlock()
	fake.FetchTokenStub = nil
	if fake.fetchTokenReturnsOnCall == nil {
		fake.fetchTokenReturnsOnCall = make(map[int]struct {
			result1 *schema.Token
			result2 error
		})
	}
	fake.fetchTokenReturnsOnCall[i] = struct {
		result1 *schema.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterOauthClient(arg1 *schema.OauthClient) (*schema.OauthClient, error) {
	fake.registerOauthClientMutex.Lock()
	ret, specificReturn := fake.registerOauthClientReturnsOnCall[len(fake.registerOauthClientArgsForCall)]
	fake.registerOauthClientArgsForCall = append(fake.registerOauthClientArgsForCall, struct {
		arg1 *schema.OauthClient
	}{arg1})
	stub := fake.RegisterOauthClientStub
	fakeReturns := fake.registerOauthClientReturns
	fake.recordInvocation("RegisterOauthClient", []interface{}{arg1})
	fake.registerOauthClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RegisterOauthClientCallCount() int {
	fake.registerOauthClientMutex.RLock()
	defer fake.registerOauthClientMutex.RUnlock()
	return len(fake.registerOauthClientArgsForCall)
}

func (fake *FakeClient) RegisterOauthClientCalls(stub func(*schema.OauthClient) (*schema.OauthClient, error)) {
	fake.registerOauthClientMutex.Lock()
	defer fake.registerOauthClientMutex.Unlock()
	fake.RegisterOauthClientStub = stub
}

func (fake *FakeClient) RegisterOauthClientArgsForCall(i int) *schema.OauthClient {
	fake.registerOauthClientMutex.RLock()
	defer fake.registerOauthClientMutex.RUnlock()
	argsForCall := fake.registerOauthClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) RegisterOauthClientReturns(result1 *schema.OauthClient, result2 error) {
	fake.registerOauthClientMutex.Lock()
	defer fake.registerOauthClientMutex.Unlock()
	fake.RegisterOauthClientStub = nil
	fake.registerOauthClientReturns = struct {
		result1 *schema.OauthClient
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterOauthClientReturnsOnCall(i int, result1 *schema.OauthClient, result2 error) {
	fake.registerOauthClientMutex.Lock()
	defer fake.registerOauthClientMutex.Unlock()
	fake.RegisterOauthClientStub = nil
	if fake.registerOauthClientReturnsOnCall == nil {
		fake.registerOauthClientReturnsOnCall = make(map[int]struct {
			result1 *schema.OauthClient
			result2 error
		})
	}
	fake.registerOauthClientReturnsOnCall[i] = struct {
		result1 *schema.OauthClient
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeTokenMutex.RLock()
	defer fake.decodeTokenMutex.RUnlock()
	fake.fetchIssuerMutex.RLock()
	defer fake.fetchIssuerMutex.RUnlock()
	fake.fetchKeyMutex.RLock()
	defer fake.fetchKeyMutex.RUnlock()
	fake.fetchTokenMutex.RLock()
	defer fake.fetchTokenMutex.RUnlock()
	fake.registerOauthClientMutex.RLock()
	defer fake.registerOauthClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaa_go_client.Client = new(FakeClient)
