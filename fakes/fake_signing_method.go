// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	jwt "github.com/golang-jwt/jwt/v4"
)

type FakeSigningMethod struct {
	AlgStub        func() string
	algMutex       sync.RWMutex
	algArgsForCall []struct {
	}
	algReturns struct {
		result1 string
	}
	algReturnsOnCall map[int]struct {
		result1 string
	}
	SignStub        func(string, interface{}) (string, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 string
		arg2 interface{}
	}
	signReturns struct {
		result1 string
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	VerifyStub        func(string, string, interface{}) error
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}
	verifyReturns struct {
		result1 error
	}
	verifyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigningMethod) Alg() string {
	fake.algMutex.Lock()
	ret, specificReturn := fake.algReturnsOnCall[len(fake.algArgsForCall)]
	fake.algArgsForCall = append(fake.algArgsForCall, struct {
	}{})
	stub := fake.AlgStub
	fakeReturns := fake.algReturns
	fake.recordInvocation("Alg", []interface{}{})
	fake.algMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningMethod) AlgCallCount() int {
	fake.algMutex.RLock()
	defer fake.algMutex.RUnlock()
	return len(fake.algArgsForCall)
}

func (fake *FakeSigningMethod) AlgCalls(stub func() string) {
	fake.algMutex.Lock()
	defer fake.algMutex.Unlock()
	fake.AlgStub = stub
}

func (fake *FakeSigningMethod) AlgReturns(result1 string) {
	fake.algMutex.Lock()
	defer fake.algMutex.Unlock()
	fake.AlgStub = nil
	fake.algReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeSigningMethod) AlgReturnsOnCall(i int, result1 string) {
	fake.algMutex.Lock()
	defer fake.algMutex.Unlock()
	fake.AlgStub = nil
	if fake.algReturnsOnCall == nil {
		fake.algReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.algReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeSigningMethod) Sign(arg1 string, arg2 interface{}) (string, error) {
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 string
		arg2 interface{}
	}{arg1, arg2})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1, arg2})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigningMethod) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeSigningMethod) SignCalls(stub func(string, interface{}) (string, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *FakeSigningMethod) SignArgsForCall(i int) (string, interface{}) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSigningMethod) SignReturns(result1 string, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningMethod) SignReturnsOnCall(i int, result1 string, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSigningMethod) Verify(arg1 string, arg2 string, arg3 interface{}) error {
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.VerifyStub
	fakeReturns := fake.verifyReturns
	fake.recordInvocation("Verify", []interface{}{arg1, arg2, arg3})
	fake.verifyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSigningMethod) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeSigningMethod) VerifyCalls(stub func(string, string, interface{}) error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = stub
}

func (fake *FakeSigningMethod) VerifyArgsForCall(i int) (string, string, interface{}) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	argsForCall := fake.verifyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSigningMethod) VerifyReturns(result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningMethod) VerifyReturnsOnCall(i int, result1 error) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSigningMethod) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.algMutex.RLock()
	defer fake.algMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigningMethod) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jwt.SigningMethod = new(FakeSigningMethod)
